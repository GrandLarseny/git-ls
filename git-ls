#!/bin/bash

usage(){
    echo 'Usage: git ls [-h | --help] [-c] [-a] [[--] directory]'
}


dotfiles=0
colors=1

while :
do
    case "$1" in
    --help|-h)
        usage
        exit 0
        ;;

    -a|-A)
        shift
        dotfiles=1
        ;;

    -c|-C)
        shift
        colors=0
        ;;

    --)
        shift
        break
        ;;

    *)
        break
        ;;
    esac
done

if [ "$#" -ne 0 ]
then
    if [ ! -d "$1" ]
    then
        usage
        exit 1
    fi
    cd "$1"
fi

if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1
then
    git rev-parse --is-inside-work-tree
    exit 1
fi

Cgreen=$'\e[0;32m'
Cred=$'\e[0;31m'
Cgrey=$'\e[0;37m'
Cyellow=$'\e[0;33m'
Creset=$'\e[0m'

if [ "$colors" -ne 1 ]
then
    Cgreen=''
    Cred=''
    Cgrey=''
    Cyellow=''
    Creset=''
fi

file_length="$(ls | wc -L)"

if [ "$dotfiles" -eq 1 ]
then
    file_length="$(ls -A | wc -L)"
    shopt -s dotglob
fi

for file in *
do
    if [ "$file" = ".git" ]
    then
        continue
    fi

    log="$(git log -1 --pretty="format:%cr%n%H%n%s" "$file")"

    if [ -n "$log" ]
    then
        awk -v gitlog="$log" -v file="$file" 'BEGIN {
            split(gitlog,l,"\n");
            printf "%-'"$file_length"'s\t%-8.15s\t'"$Cyellow"'%.7s'"$Creset"'\t%s\n", file, l[1], l[2], l[3]
        }'
    else
        printf "%-${file_length}s\t" "$file"

        status="$(git status --porcelain "$file")"

        if git check-ignore "$file" > /dev/null
        then
            echo -e "${Cgrey}Gitignored$Creset"
        elif [[ "$status" == "??"* ]]
        then
            echo -e "${Cred}Untracked$Creset"
        elif [[ "$status" == "A"* ]]
        then
            echo -e "${Cgreen}Staged$Creset"
        elif [ -z "$status" ]
        then
            echo "Empty"
        fi
    fi
done
